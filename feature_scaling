# Feature Scaling
# -*- coding: utf-8 -*-
"""
created on Thu Sep 16 10:30:43 2022
Author: Atul Singh
"""

import pandas as pd
import numpy as np
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.exceptions import NotFittedError


class FeatureScaling(BaseEstimator, TransformerMixin):

    def __init__(self, method):
        self.method = method

    def fit(self, X, y=None):
        """
        fits data frame column wise
        Parameters
        ----------
        X : pd.DataFrame
            Input samples.
        y :  pd.Series
            Target values
        Returns
        -------
        self
        """
        self.list_of_feature_names =  list(X)
        
        if self.method == 'normalizer':
            from sklearn.preprocessing import Normalizer
            self.transformer  = Normalizer().fit(X)
            
        elif self.method == 'minMaxScaler':
            from sklearn.preprocessing import MinMaxScaler
            self.transformer  = MinMaxScaler().fit(X)

        elif self.method == 'robustScaler':
            from sklearn.preprocessing import RobustScaler
            self.transformer  = RobustScaler().fit(X)

        else:
            from sklearn.preprocessing import StandardScaler
            self.transformer  = StandardScaler().fit(X)

        return self

    def transform(self, X, y=None):
        """
        Performs feature transformation using feature scaling/normalizing methods from sklearn
        Parameters
        ----------
        X : pd.DataFrame
            Input samples.
        y :  pd.Series
            Target values
        Returns
        -------
        pd.DataFrame
            Transformed data frame
        """
        if len(X) == 0:
            raise NotFittedError(
                """This FeatureScaling instance is not fitted yet. 
        Call 'fit' with appropriate arguments before using this estimator.""")
        else:
            pass

        X_scaled = self.transformer.transform(X)
        X = pd.DataFrame(X_scaled, columns = self.list_of_feature_names)

        return X

    def fit_transform(self, X, y=None, **fit_params):
        """
        Fit to data, then transform it.
        Fits transformer to `X` and `y` with optional parameters `fit_params`
        and returns a transformed version of `X`.
        Parameters
        ----------
        X : pd.DataFrame
            Input samples.
        y :  pd.Series
            Target values
        **fit_params : dict
            Additional fit parameters.
        Returns
        -------
        pd.DataFrame
            Transformed data frame.
        """
        _ = self.fit(X=X, y=y)
        return self.transform(X=X, y=y)
